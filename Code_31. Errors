 Errors in node.js

An error object in node.js does not specify any circumstances under which the error occured but error object does capture a stack trace which details the point in the code where the error was instantiated and may provide error description. All errors generated by node.js are either instantiated from error class or are intance of error class.
Properties of errors in node.js

    new Error(message) : It is used to create a new error object. It also sets error.message property to the text specified.

    											
    const err = new Error('This is an error message');
    											
    										
    JavaScript
    Copy


    error.message : It shows the description of the error. It is set using new Error(msg) property. Mostly , the message "msg" comes in the first line of the error's stack trace . An example is shown below :

    											
    //here error.message property is set to the string provided.
    const err = new Error('This is an error message');
    console.error(err.message);
    //Output will be :
    //This is an error message
    											
    										
    JavaScript
    Copy


    error.code : This is a string label which is used to identify the type of error. It specifies errors in the form of node.js error codes .
    error.stack : It returns a string in which details are provided about where in the code the error was instantiated.
    Error.captureStackTrace : This is used to create a .stack property on the target object which returns the location in the code where Error.captureStackTrace() was called. It returns the data in the form of string.
    Error.stackTraceLimit : This property specifies number of stack frames captured by stack trace. It can be any valid JS number however 10 is the default value. If set to a non-number or negative number , then stack trace will not return any frames.

Error propagation and interception in node.js

In node.js , we are having several mechanisms for error propagating and handle those propagated errors while the application is in its running state. However the way in which these errors are reported and handled completely depends upon the type of error and API style.

    Synchronous APIs : These are those APIs which uses blocking method that does not accept a callback function and uses throw to report errors.
    Asynchronous APIs : Errors which occurs in asynchronous APIs can be reported in multiple ways as shown below :
        Errors can be routed to the object's error event if an asynchronous event is called on an object

        													
        connection.on('error', (err) => {
        		//This is the error event which is used
        		//to handle the error properly
        		console.error(err);
        });							
        													
        												
        JavaScript
        Copy


        Asynchronous methods in node.js accepts an error object passed as the first argument given that method should accept callbacks. These errors are handled in the following way :

        													
        //Reading a File Asynchronously using nodejs
        //if any error occurs such as file not found
        //we don't have permissions , etc
        //then an err message will be console.
        //otherwise data will be printed
        var fs=require('fs');

        fs.readFile('message.txt', (err, data) => {
        	if (err) 
        		return console.error(err);
        		
        	console.log("Content :  " + data);
        });
        							
        													
        												
        JavaScript
        Copy


        Very few asynchronous methods still use throw to raise exception which can further be handled using try/catch block. (Not recommended)
